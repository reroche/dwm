4,5c4
< static const unsigned int borderpx  = 10;        /* border pixel of windows */
< static const unsigned int gappx     = 10;        /* gaps between windows */
---
> static const unsigned int borderpx  = 1;        /* border pixel of windows */
9,17c8,14
< static const char *fonts[]          = { "monospace:size=8" };
< static const char dmenufont[]       = "monospace:size=8";
< static const char col_gray1[]       = "#1b1b22";
< static const char col_gray2[]       = "#2b303b";
< static const char col_gray3[]       = "#7e7e7e";
< static const char col_gray4[]       = "#c0c5ce";
< static const char col_cyan[]        = "#bf4e5c";
< static const unsigned int baralpha = 0xc0;
< static const unsigned int borderalpha = OPAQUE;
---
> static const char *fonts[]          = { "monospace:size=10" };
> static const char dmenufont[]       = "monospace:size=10";
> static const char col_gray1[]       = "#222222";
> static const char col_gray2[]       = "#444444";
> static const char col_gray3[]       = "#bbbbbb";
> static const char col_gray4[]       = "#eeeeee";
> static const char col_cyan[]        = "#005577";
19,21c16,18
<   /*               fg         bg         border   */
<   [SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
<   [SchemeSel]  = { col_gray1, col_cyan,  col_cyan  },
---
> 	/*               fg         bg         border   */
> 	[SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
> 	[SchemeSel]  = { col_gray4, col_cyan,  col_cyan  },
23,46d19
< static const unsigned int alphas[][3]      = {
<   /*               fg      bg        border     */
<   [SchemeNorm] = { OPAQUE, baralpha, borderalpha },
<   [SchemeSel]  = { OPAQUE, baralpha, borderalpha },
< };
< 
< static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
< 
< /** Function to shift the current view to the left/right
<  *
<  * @param: "arg->i" stores the number of tags to shift right (positive value)
<  *          or left (negative value)
<  */
< void
< shiftview(const Arg *arg) {
<   Arg shifted;
<   if(arg->i > 0) // left circular shift
<     shifted.ui = (selmon->tagset[selmon->seltags] << arg->i)
<        | (selmon->tagset[selmon->seltags] >> (LENGTH(tags) - arg->i));
<   else // right circular shift
<     shifted.ui = selmon->tagset[selmon->seltags] >> (- arg->i)
<        | selmon->tagset[selmon->seltags] << (LENGTH(tags) + arg->i);
<   view(&shifted);
< }
48a22
> static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
51,57c25,31
<   /* xprop(1):
<    *  WM_CLASS(STRING) = instance, class
<    *  WM_NAME(STRING) = title
<    */
<   /* class      instance    title       tags mask     isfloating   monitor */
<   { "Gimp",     NULL,       NULL,       0,            1,           -1 },
<   /* { "Firefox",  NULL,       NULL,       1 << 8,       0,           -1 }, */
---
> 	/* xprop(1):
> 	 *	WM_CLASS(STRING) = instance, class
> 	 *	WM_NAME(STRING) = title
> 	 */
> 	/* class      instance    title       tags mask     isfloating   monitor */
> 	{ "Gimp",     NULL,       NULL,       0,            1,           -1 },
> 	{ "Firefox",  NULL,       NULL,       1 << 8,       0,           -1 },
65,66d38
< #include "layouts.c"
< #include "fibonacci.c"
68,83c40,43
<   /* symbol      arrange function */
<   { "[]=",       tile },    // first entry is default
<   { "[M]",       monocle },
<   { "[@]",       spiral },
<   { "|M|",       centeredmaster },
<   { "[H]",       grid },
<   { "><>",       NULL },    // no layout function means floating behavior
<   { NULL,        NULL },    // keep here for cyclelayout
<   /* { "",      tile },  */
<   /* { "",      monocle }, */
<   /* { "",      grid }, */
<   /* { "",      centeredmaster }, */
<    /* { "",     spiral }, */
<   /* { NULL,     NULL }, */
<    /* { "∞",     spiral }, */
<   /* { ">M>",    centeredfloatingmaster }, */
---
> 	/* symbol     arrange function */
> 	{ "[]=",      tile },    /* first entry is default */
> 	{ "><>",      NULL },    /* no layout function means floating behavior */
> 	{ "[M]",      monocle },
87c47
< #define MODKEY Mod4Mask
---
> #define MODKEY Mod1Mask
89,92c49,52
<   { MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
<   { MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
<   { MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
<   { MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },
---
> 	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
> 	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
> 	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
> 	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },
99a60
> static const char *termcmd[]  = { "st", NULL };
101d61
< #include "movestack.c"
103,157c63,96
<   /* modifier            key                  function        argument */
<   { MODKEY,              XK_b,                togglebar,      {0} },
<   { MODKEY,              XK_j,                focusstack,     {.i = +1 } },
<   { MODKEY,              XK_k,                focusstack,     {.i = -1 } },
<   { MODKEY|ShiftMask,    XK_j,                movestack,      {.i = +1 } },
<   { MODKEY|ShiftMask,    XK_k,                movestack,      {.i = -1 } },
<   { MODKEY|ShiftMask,    XK_i,                incnmaster,     {.i = +1 } },
<   { MODKEY|ShiftMask,    XK_o,                incnmaster,     {.i = -1 } },
<   { MODKEY,              XK_h,                setmfact,       {.f = -0.05} },
<   { MODKEY,              XK_l,                setmfact,       {.f = +0.05} },
<   { MODKEY,              XK_Tab,              view,           {0} },
<   { MODKEY|ShiftMask,    XK_q,                killclient,     {0} },
<   { MODKEY,              XK_f,                setlayout,      {.v = &layouts[1]} },
<   { MODKEY|ShiftMask,    XK_f,                setlayout,      {0} },
<   { MODKEY|ShiftMask,    XK_space,            togglefloating, {0} },
<   { MODKEY,              XK_bracketleft,      shiftview,      { .i = -1 } },
<   { MODKEY,              XK_bracketright,     shiftview,      { .i = 1 } },
<   { MODKEY|ShiftMask,    XK_Return,           zoom,           {0} },
<   { MODKEY,              XK_0,                view,           {.ui = ~0 } },
<   { MODKEY|ShiftMask,    XK_0,                tag,            {.ui = ~0 } },
<   { MODKEY,              XK_F2,               quit,           {0} },
<   { MODKEY,              XK_period,           cyclelayout,    {.i = +1 } },
<   { MODKEY,              XK_comma,            cyclelayout,    {.i = -1 } },
<   { MODKEY,              XK_minus,            setgaps,        {.i = -1 } },
<   { MODKEY|ShiftMask,    XK_equal,            setgaps,        {.i = +1 } },
<   { MODKEY,              XK_equal,            setgaps,        {.i = 0 } },
<   TAGKEYS(XK_1, 0)
<   TAGKEYS(XK_2, 1)
<   TAGKEYS(XK_3, 2)
<   TAGKEYS(XK_4, 3)
<   TAGKEYS(XK_5, 4)
<   TAGKEYS(XK_6, 5)
<   TAGKEYS(XK_7, 6)
<   TAGKEYS(XK_8, 7)
<   TAGKEYS(XK_9, 8)
< 
<   /* { MODKEY,                       XK_space,  setlayout,      {0} }, */
<   /* { MODKEY,                       XK_comma,  focusmon,       {.i = -1 } }, */
<   /* { MODKEY,                       XK_period, focusmon,       {.i = +1 } }, */
<   /* { MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } }, */
<   /* { MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } }, */
< 	/* { MODKEY,                       XK_d,      spawn,          {.v = dmenucmd } }, */
< 	/* { MODKEY,			                 XK_Return, spawn,          {.v = termcmd } }, */
< 	/* { MODKEY,                       XK_Return, zoom,           {0} }, */
< 	/* { MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} }, */
< 	/* { MODKEY|ControlMask,		       XK_comma,  cyclelayout,    {.i = -1 } }, */
< 	/* { MODKEY|ControlMask,           XK_period, cyclelayout,    {.i = +1 } }, */
< 	/* { MODKEY,                       XK_space,  setlayout,      {0} }, */
< 	/* { MODKEY|ShiftMask,             XK_space,  togglefloating, {0} }, */
< 	/* { MODKEY,                       XK_comma,  focusmon,       {.i = -1 } }, */
< 	/* { MODKEY,                       XK_period, focusmon,       {.i = +1 } }, */
< 	/* { MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } }, */
< 	/* { MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } }, */
< 	/* { MODKEY|ShiftMask,             XK_equal,  setgaps,        {.i = 0  } }, */
< 	/* { MODKEY,			                  XK_backslash,  view,		       {0} }, */
---
> 	/* modifier                     key        function        argument */
> 	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
> 	{ MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd } },
> 	{ MODKEY,                       XK_b,      togglebar,      {0} },
> 	{ MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
> 	{ MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
> 	{ MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
> 	{ MODKEY,                       XK_d,      incnmaster,     {.i = -1 } },
> 	{ MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
> 	{ MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
> 	{ MODKEY,                       XK_Return, zoom,           {0} },
> 	{ MODKEY,                       XK_Tab,    view,           {0} },
> 	{ MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
> 	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
> 	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
> 	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
> 	{ MODKEY,                       XK_space,  setlayout,      {0} },
> 	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
> 	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
> 	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
> 	{ MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
> 	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
> 	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
> 	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
> 	TAGKEYS(                        XK_1,                      0)
> 	TAGKEYS(                        XK_2,                      1)
> 	TAGKEYS(                        XK_3,                      2)
> 	TAGKEYS(                        XK_4,                      3)
> 	TAGKEYS(                        XK_5,                      4)
> 	TAGKEYS(                        XK_6,                      5)
> 	TAGKEYS(                        XK_7,                      6)
> 	TAGKEYS(                        XK_8,                      7)
> 	TAGKEYS(                        XK_9,                      8)
> 	{ MODKEY|ShiftMask,             XK_q,      quit,           {0} },
163,174c102,113
<   /* click                event mask      button          function        argument */
<   { ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
<   { ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
<   { ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
<   { ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
<   { ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
<   { ClkTagBar,            0,              Button1,        view,           {0} },
<   { ClkTagBar,            0,              Button3,        toggleview,     {0} },
<   { ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
<   { ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
<   /* { ClkWinTitle,          0,              Button2,        zoom,           {0} }, */
<   /* { ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } }, */
---
> 	/* click                event mask      button          function        argument */
> 	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
> 	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
> 	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
> 	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
> 	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
> 	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
> 	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
> 	{ ClkTagBar,            0,              Button1,        view,           {0} },
> 	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
> 	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
> 	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
175a115
> 
